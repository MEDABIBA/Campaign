/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Campaign, CampaignInterface } from "../Campaign";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "minimum",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "approveRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "contribute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "createRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "finalizeRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "manager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumContribution",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "bool",
        name: "complete",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "approvalCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051610aca380380610aca833981016040819052602c916061565b6000805461ffff909316600160a01b026001600160b01b03199093166001600160a01b039092169190911791909117905560ab565b60008060408385031215607357600080fd5b825161ffff81168114608457600080fd5b60208401519092506001600160a01b038116811460a057600080fd5b809150509250929050565b610a10806100ba6000396000f3fe60806040526004361061007b5760003560e01c80638a9cfd551161004e5780638a9cfd5514610150578063937e09b114610170578063d7bb99ba146101a5578063d7d1bbdb146101ad57600080fd5b806303441006146100805780630a144391146100a2578063481c6a75146100e757806381d12c581461011f575b600080fd5b34801561008c57600080fd5b506100a061009b366004610604565b6101cd565b005b3480156100ae57600080fd5b506100d26100bd366004610639565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156100f357600080fd5b50600054610107906001600160a01b031681565b6040516001600160a01b0390911681526020016100de565b34801561012b57600080fd5b5061013f61013a366004610604565b610346565b6040516100de95949392919061065b565b34801561015c57600080fd5b506100a061016b3660046106e7565b610425565b34801561017c57600080fd5b5060005461019290600160a01b900461ffff1681565b60405161ffff90911681526020016100de565b6100a06104c5565b3480156101b957600080fd5b506100a06101c8366004610604565b61052a565b6000546001600160a01b031633146102005760405162461bcd60e51b81526004016101f7906107b7565b60405180910390fd5b600060038281548110610215576102156107fa565b60009182526020909120600280546005909302909101925061023a9161ffff16610826565b61ffff168160030154116102875760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820617070726f76616c7360601b60448201526064016101f7565b6002810154600160a01b900460ff16156102ee5760405162461bcd60e51b815260206004820152602260248201527f5468697320636f6e747261637420697320616c726561647920636f6d706c6574604482015261195960f21b60648201526084016101f7565b600281015460018201546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561032e573d6000803e3d6000fd5b50600201805460ff60a01b1916600160a01b17905550565b6003818154811061035657600080fd5b906000526020600020906005020160009150905080600001805461037990610858565b80601f01602080910402602001604051908101604052809291908181526020018280546103a590610858565b80156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b5050505060018301546002840154600390940154929390926001600160a01b0382169250600160a01b90910460ff169085565b6000546001600160a01b0316331461044f5760405162461bcd60e51b81526004016101f7906107b7565b6003805460018101808355600083815291929083908110610472576104726107fa565b6000918252602090912060059091020190508061048f86826108e1565b506001810193909355506002820180546001600160a81b0319166001600160a01b03909216919091179055600060039091015550565b600054600160a01b900461ffff163410156104df57600080fd5b3360009081526001602081905260408220805460ff191690911790556002805461ffff169161050d836109a0565b91906101000a81548161ffff021916908361ffff16021790555050565b60006003828154811061053f5761053f6107fa565b6000918252602080832033845260019091526040909220546005909102909101915060ff166105b05760405162461bcd60e51b815260206004820152601760248201527f596f75206d75737420626520616e20696e766573746f7200000000000000000060448201526064016101f7565b33600090815260048201602052604090205460ff16156105cf57600080fd5b3360009081526004820160205260408120805460ff19166001179055600382018054916105fb836109c1565b91905055505050565b60006020828403121561061657600080fd5b5035919050565b80356001600160a01b038116811461063457600080fd5b919050565b60006020828403121561064b57600080fd5b6106548261061d565b9392505050565b60a08152600086518060a084015260005b81811015610689576020818a0181015160c086840101520161066c565b50600060c0828501015260c0601f19601f8301168401019150508560208301526106be60408301866001600160a01b03169052565b9215156060820152608001529392505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156106fc57600080fd5b833567ffffffffffffffff81111561071357600080fd5b8401601f8101861361072457600080fd5b803567ffffffffffffffff81111561073e5761073e6106d1565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561076d5761076d6106d1565b60405281815282820160200188101561078557600080fd5b8160208401602083013760006020928201830152945085013592506107ae90506040850161061d565b90509250925092565b60208082526023908201527f54686520636f6e74616374206d61792063616c6c206f6e6c79206d616e61676560408201526203910960ed1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff83168061084857634e487b7160e01b600052601260045260246000fd5b8061ffff84160491505092915050565b600181811c9082168061086c57607f821691505b60208210810361088c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108dc57806000526020600020601f840160051c810160208510156108b95750805b601f840160051c820191505b818110156108d957600081556001016108c5565b50505b505050565b815167ffffffffffffffff8111156108fb576108fb6106d1565b61090f816109098454610858565b84610892565b6020601f821160018114610943576000831561092b5750848201515b600019600385901b1c1916600184901b1784556108d9565b600084815260208120601f198516915b828110156109735787850151825560209485019460019092019101610953565b50848210156109915786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b600061ffff821661ffff81036109b8576109b8610810565b60010192915050565b6000600182016109d3576109d3610810565b506001019056fea26469706673582212201510dc11a32c572861ba6fa240becf699aa83ab826833a977462b83061a7168e64736f6c634300081c0033";

type CampaignConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CampaignConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Campaign__factory extends ContractFactory {
  constructor(...args: CampaignConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    minimum: BigNumberish,
    sender: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(minimum, sender, overrides || {});
  }
  override deploy(
    minimum: BigNumberish,
    sender: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(minimum, sender, overrides || {}) as Promise<
      Campaign & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Campaign__factory {
    return super.connect(runner) as Campaign__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CampaignInterface {
    return new Interface(_abi) as CampaignInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Campaign {
    return new Contract(address, _abi, runner) as unknown as Campaign;
  }
}
